MATCH (n) DETACH DELETE n

create(c:Chapter{name:'栈和队列',no:'第三章',label:'Chapter'})
create(s:Section{name:'栈',no:'3.1',label:'Section'})
create(s1:Part{name:'栈的基本概念',no:'3.1.1',label:'Part'})
create(s2:Part{name:'栈的基本操作',no:'3.1.2',label:'Part'})
create(s3:Part{name:'栈的顺序存储',no:'3.1.3',label:'Part'})
create(s4:Part{name:'栈的链式存储',no:'3.1.4',label:'Part'})
create(s5:Part{name:'栈的应用',no:'3.1.5',label:'Part'})

match(n:Chapter{name:'栈和队列'}),(m:Section{name:'栈'}) merge (n)-[r:章和节]->(m)
match(m:Section{name:'栈'}),(m1:Part{name:'栈的基本概念'}) merge (m)-[r:节和部分]->(m1)
match(m:Section{name:'栈'}),(m2:Part{name:'栈的基本操作'}) merge (m)-[r:节和部分]->(m2)
match(m:Section{name:'栈'}),(m3:Part{name:'栈的顺序存储'}) merge (m)-[r:节和部分]->(m3)
match(m:Section{name:'栈'}),(m4:Part{name:'栈的链式存储'}) merge (m)-[r:节和部分]->(m4)
match(m:Section{name:'栈'}),(m5:Part{name:'栈的应用'}) merge (m)-[r:节和部分]->(m5)

create(s:Section{name:'队列',no:'3.2',label:'Section'})
create(s1:Part{name:'队列的基本概念',no:'3.2.1',label:'Part'})
create(s2:Part{name:'队列的基本操作',no:'3.2.2',label:'Part'})
create(s3:Part{name:'队列的顺序存储',no:'3.2.3',label:'Part'})
create(s4:Part{name:'队列的链式存储',no:'3.2.4',label:'Part'})
create(s5:Part{name:'队列的应用',no:'3.2.5',label:'Part'})

match(n:Chapter{name:'栈和队列'}),(m:Section{name:'队列'}) merge (n)-[r:章和节]->(m)
match(m:Section{name:'队列'}),(m1:Part{name:'队列的基本概念'}) merge (m)-[r1:节和部分]->(m1)
match(m:Section{name:'队列'}),(m2:Part{name:'队列的基本操作'}) merge (m)-[r2:节和部分]->(m2)
match(m:Section{name:'队列'}),(m3:Part{name:'队列的顺序存储'}) merge (m)-[r3:节和部分]->(m3)
match(m:Section{name:'队列'}),(m4:Part{name:'队列的链式存储'}) merge (m)-[r4:节和部分]->(m4)
match(m:Section{name:'队列'}),(m5:Part{name:'队列的应用'}) merge (m)-[r5:节和部分]->(m5)

create(p1:Point{name:'栈',no:'1',definition:'栈是只允许在一端（栈顶）进行插入或删除操作的线性表',label:'Point'})
create(p2:Point{name:'栈顶',no:'2',definition:'线性表允许进行插入或删除的一端',label:'Point'})
create(p3:Point{name:'栈底',no:'3',definition:'栈底是固定的，不允许进行插入和删除的另一端',label:'Point'})
create(p4:Point{name:'空栈',no:'4',definition:'不含任何元素的空表',label:'Point'})
create(p5:Point{name:'栈的操作特性',no:'5',content:'后进先出(LIFO)',label:'Point'})
create(p6:sigPoint{name:'栈的数学性质',no:'6',content:'n个不同元素进栈，出栈元素不同的排列的个数为1/(n+1)*((2n)!/(n!*(2n-n)!)),上式公式称为卡特兰数（合法出栈序列个数）',label:'sigPoint'})

match(p:Part{name:'栈的基本概念'}),(p1:Point{name:'栈'}) merge (p)-[r:部分与知识点]->(p1)
match(p:Part{name:'栈的基本概念'}),(p2:Point{name:'栈顶'}) merge (p)-[r:部分与知识点]->(p2)
match(p:Part{name:'栈的基本概念'}),(p3:Point{name:'栈底'}) merge (p)-[r:部分与知识点]->(p3)
match(p:Part{name:'栈的基本概念'}),(p4:Point{name:'空栈'}) merge (p)-[r:部分与知识点]->(p4)
match(p:Part{name:'栈的基本概念'}),(p5:Point{name:'栈的操作特性'}) merge (p)-[r:部分与知识点]->(p5)
match(p:Part{name:'栈的基本概念'}),(p6:sigPoint{name:'栈的数学性质'}) merge (p)-[r:部分与知识点]->(p6)
match(p2:Point{name:'栈顶'}),(p3:Point{name:'栈底'}) merge (p2)-[r:相对位置]->(p3)
create(p3)-[:`相对位置`]->(p2)

create(p1:Point{name:'InitStack(&s)',no:'1',definition:'初始化一个空栈s',label:'Point'})
create(p2:Point{name:'StackEmpty(s)',no:'2',definition:'判断一个栈s是否为空，若栈为空则返回true，否则返回false',label:'Point'})
create(p3:Point{name:'Push(&s,x)',no:'3',definition:'进栈，若栈s未满，则将x加入使之称为新栈顶',label:'Point'})
create(p4:Point{name:'Pop(&s,&x)',no:'4',definition:'出栈，若栈s非空，则弹出栈顶元素，并用x返回',label:'Point'})
create(p5:Point{name:'GetTop(s,&x)',no:'5',definition:'读栈顶元素，若栈非空，则用x返回栈顶元素',label:'Point'})
create(p6:Point{name:'DestroyStack(&s)',no:'6',definition:'销毁栈，并释放栈s占用的存储空间',label:'Point'})

match(p:Part{name:'栈的基本操作'}),(p1:Point{name:'InitStack(&s)'}) merge (p)-[r:部分与知识点]->(p1)
match(p:Part{name:'栈的基本操作'}),(p2:Point{name:'StackEmpty(s)'}) merge (p)-[r:部分与知识点]->(p2)
match(p:Part{name:'栈的基本操作'}),(p3:Point{name:'Push(&s,x)'}) merge (p)-[r:部分与知识点]->(p3)
match(p:Part{name:'栈的基本操作'}),(p4:Point{name:'Pop(&s,&x)'}) merge (p)-[r:部分与知识点]->(p4)
match(p:Part{name:'栈的基本操作'}),(p5:Point{name:'GetTop(s,&x)'}) merge (p)-[r:部分与知识点]->(p5)
match(p:Part{name:'栈的基本操作'}),(p6:Point{name:'DestroyStack(&s)'}) merge (p)-[r:部分与知识点]->(p6)

create(p1:Point{name:'顺序栈的实现',no:'1',label:'Point'})
create(p2:Point{name:'顺序栈的基本运算',no:'2',label:'Point'})
create(p3:Point{name:'共享栈',no:'3',label:'Point'})

match(p:Part{name:'栈的顺序存储'}),(p1:Point{name:'顺序栈的实现'}) merge (p)-[r:部分与知识点]->(p1)
match(p:Part{name:'栈的顺序存储'}),(p2:Point{name:'顺序栈的基本运算'}) merge (p)-[r:部分与知识点]->(p2)
match(p:Part{name:'栈的顺序存储'}),(p3:Point{name:'共享栈'}) merge (p)-[r:部分与知识点]->(p3)

create(p1:LPoint{name:'定义',no:'(1)',content:'采用顺序存储的栈称为顺序栈，它用一组地址连续的存储单元存放自栈底到栈顶的数据元素，同时附设一个指针(top)指示当前栈顶元素的位置',label:'LPoint'})
create(p2:LPoint{name:'顺序栈的声明',no:'(2)',content:'
#define MaxSize 50
typedef struct{
    ElemType data[MaxSize];
    int top;
}SqStack;',label:'LPoint'})
create(p3:LPoint{name:'顺序栈的基本概念',no:'(3)',label:'LPoint'})

match(p:Point{name:'顺序栈的实现'}),(p1:LPoint{name:'定义'}) merge (p)-[r:知识点与子知识点]->(p1)
match(p:Point{name:'顺序栈的实现'}),(p2:LPoint{name:'顺序栈的声明'}) merge (p)-[r:知识点与子知识点]->(p2)
match(p:Point{name:'顺序栈的实现'}),(p3:LPoint{name:'顺序栈的基本概念'}) merge (p)-[r:知识点与子知识点]->(p3)

create(a1:atom{name:'栈顶指针',no:'①',definition:'S.top,初始时设置S.top=-1（也可以是0）',label:':atom'})
create(a2:atom{name:'栈顶元素',no:'②',definition:'S.data[S.top]',label:'atom'})
create(a3:atom{name:'进栈操作',no:'③',definition:'栈不满时，栈顶指针先加1，再送值到栈顶元素',label:'atom'})
create(a4:atom{name:'出栈操作',no:'④',definition:'栈非空时，先取栈顶元素值，再将栈顶指针减1',label:'atom'})
create(a5:atom{name:'栈空条件',no:'⑤',definition:'S.top==-1',label:':atom'})
create(a6:atom{name:'栈满条件',no:'⑥',definition:'S.top==MaxSize-1',label:'atom'})
create(a7:atom{name:'栈长',no:'⑦',definition:'S.top+1',label:'atom'})

match(p:LPoint{name:'顺序栈的基本概念'}),(a1:atom{name:'栈顶指针'}) merge (p)-[r:子知识点与知识原子]->(a1)
match(p:LPoint{name:'顺序栈的基本概念'}),(a2:atom{name:'栈顶元素'}) merge (p)-[r:子知识点与知识原子]->(a2)
match(p:LPoint{name:'顺序栈的基本概念'}),(a3:atom{name:'进栈操作'}) merge (p)-[r:子知识点与知识原子]->(a3)
match(p:LPoint{name:'顺序栈的基本概念'}),(a4:atom{name:'出栈操作'}) merge (p)-[r:子知识点与知识原子]->(a4)
match(p:LPoint{name:'顺序栈的基本概念'}),(a5:atom{name:'栈空条件'}) merge (p)-[r:子知识点与知识原子]->(a5)
match(p:LPoint{name:'顺序栈的基本概念'}),(a6:atom{name:'栈满条件'}) merge (p)-[r:子知识点与知识原子]->(a6)
match(p:LPoint{name:'顺序栈的基本概念'}),(a7:atom{name:'栈长'}) merge (p)-[r:子知识点与知识原子]->(a7)

create(p1:LPoint{name:'初始化',no:'(1)',content:'
void InitStack(Sqtack &s){
    S.top=-1;
}',label:'LPoint'})
create(p2:LPoint{name:'判栈空',no:'(2)',content:'
bool StackEmpty(SqStack S){
    if(S.top==-1)
        return true;
    else
        return false;
}',label:'LPoint'})
create(p3:LPoint{name:'进栈',no:'(3)',content:'
bool Push(SqStack &S, ElemType x){
    if(S.top==MaxSize-1){
        return false;
    S.data[++S.top]=x;
    return true;
}',label:'LPoint'})
create(p4:LPoint{name:'出栈',no:'(4)',content:'
bool Pop(SqStack &S, ElemType &x){
    if(S.top==-1)       //顺序栈的销毁是在逻辑上让top=-1
        return false;
    x=S.date[S.top--];
    return true;
}',label:'LPoint'})
create(p5:LPoint{name:'读取栈顶元素',no:'(5)',content:'
bool GetTop(SqStack S, ElemType &x){
    if(S.top==1)
        return false;
    x=S.data[S.top];
    return true;
}',label:'LPoint'})

match(p:Point{name:'顺序栈的基本运算'}),(p1:LPoint{name:'初始化'}) merge (p)-[r:知识点与子知识点]->(p1)
match(p:Point{name:'顺序栈的基本运算'}),(p2:LPoint{name:'判栈空'}) merge (p)-[r:知识点与子知识点]->(p2)
match(p:Point{name:'顺序栈的基本运算'}),(p3:LPoint{name:'进栈'}) merge (p)-[r:知识点与子知识点]->(p3)
match(p:Point{name:'顺序栈的基本运算'}),(p4:LPoint{name:'出栈'}) merge (p)-[r:知识点与子知识点]->(p4)
match(p:Point{name:'顺序栈的基本运算'}),(p5:LPoint{name:'读取栈顶元素'}) merge (p)-[r:知识点与子知识点]->(p5)

create(p1:LPoint{name:'定义',no:'(1)',content:'将两个栈的栈底分别设置在共享空间的两端，两个栈顶向共享空间的中间延伸',label:'LPoint'})
create(p2:LPoint{name:'共享栈的基本概念',no:'(2)',label:'LPoint'})
create(a1:atom{name:'判空',no:'①',definition:'0号栈：top0==-1;1号栈：top1==MaxSize;',label:'atom'})
create(a2:atom{name:'栈满',no:'②',definition:'top1-top0==1',label:'atom'})
create(a3:atom{name:'存取数据的时间复杂度',no:'③',definition:'均为O(1)',label:'atom'})

match(p:Point{name:'共享栈'}),(p1:LPoint{name:'定义',content:'将两个栈的栈底分别设置在共享空间的两端，两个栈顶向共享空间的中间延伸'}) merge (p)-[r:知识点与子知识点]->(p1)
match(p:Point{name:'共享栈'}),(p2:LPoint{name:'共享栈的基本概念'}) merge (p)-[r:知识点与子知识点]->(p2)
match(p:LPoint{name:'共享栈的基本概念'}),(a1:atom{name:'判空'}) merge (p)-[r:子知识点与知识原子]->(a1)
match(p:LPoint{name:'共享栈的基本概念'}),(a2:atom{name:'栈满'}) merge (p)-[r:子知识点与知识原子]->(a2)
match(p:LPoint{name:'共享栈的基本概念'}),(a3:atom{name:'存取数据的时间复杂度'}) merge (p)-[r:子知识点与知识原子]->(a3)

create(p1:Point{name:'定义',no:'1',content:'采用链式存储的栈称为链栈，链栈的优点是便于多个栈共享存储空间和提高其效率，且不存在栈满上溢的情况',label:'Point'})
create(p2:Point{name:'链式栈的声明',no:'2',content:'
typedef struct Linknode{
    ElemType data;
    struct Linknode *next;
}*LStack',label:'Point'})

match(p:Part{name:'栈的链式存储'}),(p1:Point{name:'定义'}) merge (p)-[r:部分与知识点]->(p1)
match(p:Part{name:'栈的链式存储'}),(p2:Point{name:'链式栈的声明'}) merge (p)-[r:部分与知识点]->(p2)

create(p1:Point{name:'队列的定义',no:'1',content:'队列简称队，也是一种操作受限制的线性表，只允许在表的一端进行插入，而在表的另一端进行删除。向队列中插入元素成为入队或进队；删除元素称为出队或离队',label:'Point'})
create(p2:Point{name:'队列的操作特性',no:'2',content:'先进先出(FIFO)',label:'Point'})
create(p3:Point{name:'队列的基本操作',no:'3',label:'Point'})

match(p:Part{name:'队列的基本概念'}),(p1:Point{name:'队列的定义'}) merge (p)-[r:部分与知识点]->(p1)
match(p:Part{name:'队列的基本概念'}),(p2:Point{name:'队列的操作特性'}) merge (p)-[r:部分与知识点]->(p2)

create(p1:Point{name:'InitQueue(&Q)',no:'(1)',definition:'初始化队列，构造一个空队列Q',label:'Point'})
create(p2:Point{name:'QueueEmpty(Q)',no:'(2)',definition:'判断队列空，若队列Q为空返回true，否则返回false',label:'Point'})
create(p3:Point{name:'EnQueue(&Q,x)',no:'(3)',definition:'入队，若队列Q未满，将x加入，使之成为新的队尾',label:'Point'})
create(p4:Point{name:'DeQueue(&Q,&x)',no:'(4)',definition:'出队，若队列Q非空，删除队头元素，并用x返回',label:'Point'})
create(p5:Point{name:'GetHead(Q,&x)',no:'(5)',definition:'读队头元素，若队列非空，则将队头元素赋值给x',label:'Point'})

match(p:Part{name:'队列的基本操作'}),(p1:Point{name:'InitQueue(&Q)'}) merge (p)-[r:部分与知识点]->(p1)
match(p:Part{name:'队列的基本操作'}),(p2:Point{name:'QueueEmpty(Q)'}) merge (p)-[r:部分与知识点]->(p2)
match(p:Part{name:'队列的基本操作'}),(p3:Point{name:'EnQueue(&Q,x)'}) merge (p)-[r:部分与知识点]->(p3)
match(p:Part{name:'队列的基本操作'}),(p4:Point{name:'DeQueue(&Q,&x)'}) merge (p)-[r:部分与知识点]->(p4)
match(p:Part{name:'队列的基本操作'}),(p5:Point{name:'GetHead(Q,&x)'}) merge (p)-[r:部分与知识点]->(p5)

create(p1:Point{name:'顺序队列',no:'1',label:'Point'})
create(p2:Point{name:'循环队列',no:'2',label:'Point'})

match(p:Part{name:'队列的顺序存储'}),(p1:Point{name:'顺序队列'}) merge (p)-[r:部分与知识点]->(p1)
match(p:Part{name:'队列的顺序存储'}),(p2:Point{name:'循环队列'}) merge (p)-[r:部分与知识点]->(p2)

create(p1:LPoint{name:'定义',no:'(1)',content:'队列的顺序实现是指分配一块连续的存储单元存放队列中的元素，并附设两个指针：队头指针front指向队头元素，队尾指针rear指向队尾元素的下一个位置',label:'LPoint'})
create(p2:LPoint{name:'顺序队列的声明',no:'(2)',content:'
#define MaxSize 50
typedef struct{
    ElemType data[MaxSize];
    int front,rear;
}SqQueue;',label:'LPoint'})
create(p3:LPoint{name:'顺序队列的基本概念',no:'(3)',label:'LPoint'})

match(p:Point{name:'顺序队列'}),(p1:LPoint{name:'定义',content:'队列的顺序实现是指分配一块连续的存储单元存放队列中的元素，并附设两个指针：队头指针front指向队头元素，队尾指针rear指向队尾元素的下一个位置'}) merge (p)-[r:知识点与子知识点]->(p1)
match(p:Point{name:'顺序队列'}),(p2:LPoint{name:'顺序队列的声明'}) merge (p)-[r:知识点与子知识点]->(p2)
match(p:Point{name:'顺序队列'}),(p3:LPoint{name:'顺序队列的基本概念'}) merge (p)-[r:知识点与子知识点]->(p3)

create(a1:atom{name:'初始状态（队空条件）',no:'①',definition:'Q.front==Q.rear==0',label:'atom'})
create(a2:atom{name:'进队操作',no:'②',definition:'队不满时，先送值到队尾元素，再将队尾指针加1',label:'atom'})
create(a3:atom{name:'出队操作',no:'③',definition:'队不空时，先取队头元素值，再将队头指针加1',label:'atom'})
create(a4:atom{name:'判空',no:'④',definition:'Q.front==Q.rear',label:'atom'})
create(a5:atom{name:'队长',no:'⑤',definition:'Q.rear-Q.front',label:'atom'})
create(n:note{name:'假溢出',definition:'Q.rear==MaxSize不能作为队满的判断条件，因为当队满之后，删除一些队头元素时也是满足该条件，这成为“假溢出”',label:'note'})

match(p:LPoint{name:'顺序队列的基本概念'}),(a1:atom{name:'初始状态（队空条件）'}) merge (p)-[r:子知识点与知识原子]->(a1)
match(p:LPoint{name:'顺序队列的基本概念'}),(a2:atom{name:'进队操作'}) merge (p)-[r:子知识点与知识原子]->(a2)
match(p:LPoint{name:'顺序队列的基本概念'}),(a3:atom{name:'出队操作'}) merge (p)-[r:子知识点与知识原子]->(a3)
match(p:LPoint{name:'顺序队列的基本概念'}),(a4:atom{name:'判空',definition:'Q.front==Q.rear'}) merge (p)-[r:子知识点与知识原子]->(a4)
match(p:LPoint{name:'顺序队列的基本概念'}),(a5:atom{name:'队长'}) merge (p)-[r:子知识点与知识原子]->(a5)
match(p:LPoint{name:'顺序队列的基本概念'}),(n:note{name:'假溢出'}) merge (p)-[r:注意]->(n)

create(p1:LPoint{name:'定义',no:'(1)',content:'将顺序队列臆造为一个环状的空间，即把存储队列元素的表从逻辑上视为一个环，称为循环队列',label:'LPoint'})
create(p2:LPoint{name:'循环队列的基本概念',no:'(2)',label:'LPoint'})
create(p3:sigPoint{name:'区分队空还是队满的三种处理方式',no:'(3)',label:'LPoint'})
create(p4:LPoint{name:'循环队列的操作',no:'(4)',label:'LPoint'})

match(p:Point{name:'循环队列'}),(p1:LPoint{name:'定义',content:'将顺序队列臆造为一个环状的空间，即把存储队列元素的表从逻辑上视为一个环，称为循环队列'}) merge (p)-[r:知识点与子知识点]->(p1)
match(p:Point{name:'循环队列'}),(p2:LPoint{name:'循环队列的基本概念'}) merge (p)-[r:知识点与子知识点]->(p2)
match(p:Point{name:'循环队列'}),(p3:sigPoint{name:'区分队空还是队满的三种处理方式'}) merge (p)-[r:知识点与子知识点]->(p3)
match(p:Point{name:'循环队列'}),(p4:LPoint{name:'循环队列的操作'}) merge (p)-[r:知识点与子知识点]->(p4)

create(a1:atom{name:'初始时',no:'①',definition:'Q.front=Q.rear=0',label:'atom'})
create(a2:atom{name:'队首指针进1',no:'②',definition:'Q.front=(Q.front+1)%MaxSize',label:'atom'})
create(a3:atom{name:'队尾指针进1',no:'③',definition:'Q.rear=(Q.rear+1)%MaxSize',label:'atom'})
create(a4:atom{name:'队列长度',no:'④',definition:'(Q.rear+MaxSize-Q.front)%MaxSize',label:'atom'})

match(p:LPoint{name:'循环队列的基本概念'}),(a1:atom{name:'初始时'}) merge (p)-[r:子知识点与知识原子]->(a1)
match(p:LPoint{name:'循环队列的基本概念'}),(a2:atom{name:'队首指针进1'}) merge (p)-[r:子知识点与知识原子]->(a2)
match(p:LPoint{name:'循环队列的基本概念'}),(a3:atom{name:'队尾指针进1'}) merge (p)-[r:子知识点与知识原子]->(a3)
match(p:LPoint{name:'循环队列的基本概念'}),(a4:atom{name:'队列长度'}) merge (p)-[r:子知识点与知识原子]->(a4)

create(a1:atom{name:'牺牲单元法',no:'①',content:'牺牲一个单元来区分队空和队满，入队时少用一个队列单元，这是一种较为普遍的做法，约定以“队头指针在队尾指针的下一位置作为队满的标志”
1）队满条件：(Q.rear+1)%MaxSize==Q.front;2）队空条件：Q.front==Q.rear;3）队列中元素的个数：(Q.rear-Q.front+MaxSize)%MaxSize',label:'atom'})
create(a2:atom{name:'计数法',no:'②',content:'类型中增设表示元素个数的数据成员
1）队空条件：Q.size==0;2）队满条件==MaxSize（注：这两种情况Q.front==Q.rear）',label:'atom'})
create(a3:atom{name:'标志法',no:'③',content:'类型汇总增设tag数据成员，以区分是队满还是队空（删除时tag=0，插入时tag=1）
1）队空条件：Q.front==Q.rear&&tag==0';2）队满条件：Q.front==Q.rear&&tag==1',label:'atom'})

match(p:sigPoint{name:'区分队空还是队满的三种处理方式'}),(a1:atom{name:'牺牲单元法'}) merge (p)-[r:子知识点与知识原子]->(a1)
match(p:sigPoint{name:'区分队空还是队满的三种处理方式'}),(a2:atom{name:'计数法'}) merge (p)-[r:子知识点与知识原子]->(a2)
match(p:sigPoint{name:'区分队空还是队满的三种处理方式'}),(a3:atom{name:'标志法'}) merge (p)-[r:子知识点与知识原子]->(a3)

create(a1:atom{name:'初始化',no:'①',content:'
void InitQueue(SqQueue &Q){
    Q.rear=Q.front=0;
}',label:'atom'})
create(a2:atom{name:'判空',no:'②',content:'
bool isEmpty(SqQueue Q){
    if(Q.rear==Q.front)
        return true;
    else
        return false;
}',label:'atom'})
create(a3:atom{name:'入队',no:'③',content:'
bool EnQueue(SqQueue &Q,ElemType x){
    if((Q.rear+1)%MaxSize==Q.front)
        return false;
    Q.data[Q.rear]=x;
    Q.rear=(Q.rear+1)%MaxSize;
    return true;
}',label:'atom'})
create(a4:atom{name:'出队',no:'④',content:'
bool DeQueue(SqQueue &Q,ElemType &x){
    if(Q.rear==Q.front)
        return false;
    x=Q.data[Q.front];
    Q.front=(Q.front+1)%MaxSize;
    return true;
}',label:'atom'})
create(a5:atom{name:'读取队头元素',no:'⑤',content:'
bool GetHead(SqQueue &Q,ElemType &x){
    if(Q.rear==Q.front)
        return false;
    x=Q.data[Q.front];
    return true;
}',label:'atom'})

match(p:LPoint{name:'循环队列的操作'}),(a1:atom{name:'初始化',content:'
void InitQueue(SqQueue &Q){
    Q.rear=Q.front=0;
}'}) merge (p)-[r:子知识点与知识原子]->(a1)
match(p:LPoint{name:'循环队列的操作'}),(a2:atom{name:'判空',content:'
bool isEmpty(SqQueue Q){
    if(Q.rear==Q.front)
        return true;
    else
        return false;
}'}) merge (p)-[r:子知识点与知识原子]->(a2)
match(p:LPoint{name:'循环队列的操作'}),(a3:atom{name:'入队',content:'
bool EnQueue(SqQueue &Q,ElemType x){
    if((Q.rear+1)%MaxSize==Q.front)
        return false;
    Q.data[Q.rear]=x;
    Q.rear=(Q.rear+1)%MaxSize;
    return true;
}'}) merge (p)-[r:子知识点与知识原子]->(a3)
match(p:LPoint{name:'循环队列的操作'}),(a4:atom{name:'出队',content:'
bool DeQueue(SqQueue &Q,ElemType &x){
    if(Q.rear==Q.front)
        return false;
    x=Q.data[Q.front];
    Q.front=(Q.front+1)%MaxSize;
    return true;
}'}) merge (p)-[r:子知识点与知识原子]->(a4)
match(p:LPoint{name:'循环队列的操作'}),(a5:atom{name:'读取队头元素',content:'
bool GetHead(SqQueue &Q,ElemType &x){
    if(Q.rear==Q.front)
        return false;
    x=Q.data[Q.front];
    return true;
}'}) merge (p)-[r:子知识点与知识原子]->(a5)

create(p1:Point{name:'链队列',no:'1',label:'Point'})
create(p2:Point{name:'链队列的基本操作',no:'2',label:'Point'})
create(p3:Point{name:'双端队列',no:'3',label:'Point'})

match(p:Part{name:'队列的链式存储'}),(p1:Point{name:'链队列'}) merge (p)-[r:部分与知识点]->(p1)
match(p:Part{name:'队列的链式存储'}),(p2:Point{name:'链队列的基本操作'}) merge (p)-[r:部分与知识点]->(p2)
match(p:Part{name:'队列的链式存储'}),(p3:Point{name:'双端队列'}) merge (p)-[r:部分与知识点]->(p3)

create(p1:LPoint{name:'定义',no:'(1)',content:'队列的链式表示称为链队列，它实际上是一个同时带有队头指针和队尾指针的单链表',label:'LPoint'})
create(p2:LPoint{name:'链队列的声明',no:'(2)',content:'
typedef struct LinkNode{
    ElemType data;
    struct LinkNode *next;
}LinkNode;
typedef struct{
    LinkNode *front,*rear;
}LinkQueue;',label:'LPoint'})
create(p3:LPoint{name:'链队列的基本概念',no:'(3)',content:'判空：Q.front==NULL&&Q.rear==NULL',label:'LPoint'})

match(p:Point{name:'链队列'}),(p1:LPoint{name:'定义',content:'队列的链式表示称为链队列，它实际上是一个同时带有队头指针和队尾指针的单链表'}) merge (p)-[r:知识点与子知识点]->(p1)
match(p:Point{name:'链队列'}),(p2:LPoint{name:'链队列的声明'}) merge (p)-[r:知识点与子知识点]->(p2)
match(p:Point{name:'链队列'}),(p3:LPoint{name:'链队列的基本概念'}) merge (p)-[r:知识点与子知识点]->(p3)

create(p1:LPoint{name:'初始化',no:'(1)',content:'
void InitQueue(LinkQueue &Q){
    Q.front=Q.rear=(LinkNode *)malloc(sizeof(LinkNode));
    Q.front→next=NULL;
}',label:'LPoint'})
create(p2:LPoint{name:'判队空',no:'(2)',content:'
bool IsEmpty(LinkQueue Q){
    if(Q.front==Q.rear)
        return true;
    else
        return false;
}',label:'LPoint'})
create(p3:LPoint{name:'入队',no:'(3)',content:'
void EnQueue(LinkQueue &Q,ElemType x){
    LinkNode *s=(LinkNode *)malloc(sizeof(LinkNode));
    s→data=x;
    s→next=NULL；
    Q.rear→next=s;
    Q.rear=s;
}',label:'LPoint'})
create(p4:LPoint{name:'出队',no:'(4)',content:'
void DeQueue(LinkQueue &Q,ElemType &x){
    if(Q.front==Q.rear)
        return false;
        LinkNode *p=Q.front→next;
        x=p→data;
        Q.front→next=p→next;
        if(Q.rear==p)
            Q.rear=Q.front;        //    此次是最后一个结点出队
        free(p);
        return true;
}',label:'LPoint'})

match(p:Point{name:'链队列的基本操作'}),(p1:LPoint{name:'初始化',content:'
void InitQueue(LinkQueue &Q){
    Q.front=Q.rear=(LinkNode *)malloc(sizeof(LinkNode));
    Q.front→next=NULL;
}'}) 
where id(p)=85 and id(p1)=90
create (p)-[r:知识点与子知识点]->(p1)
match(p:Point{name:'链队列的基本操作'}),(p2:LPoint{name:'判队空'})
where id(p)=85 and id(p2)=91
create (p)-[r:知识点与子知识点]->(p2)
match(p:Point{name:'链队列的基本操作'}),(p3:LPoint{name:'入队'}) 
where id(p)=85 and id(p3)=92
create (p)-[r:知识点与子知识点]->(p3)
match(p:Point{name:'链队列的基本操作'}),(p4:LPoint{name:'出队'})
where id(p)=85 and id(p4)=93
create (p)-[r:知识点与子知识点]->(p4)

create(p1:LPoint{name:'定义',no:'(1)',content:'双端队列是允许两端都可以进行入队和出队操作的队列。其元素的逻辑结构仍是线性结构',label:'LPoint'})
create(p2:LPoint{name:'输出受限的双端队列',no:'(2)',definition:'允许一端进行插入和删除，另一端只允许插入',label:'LPoint'})
create(p3:LPoint{name:'输入受限的双端队列',no:'(3)',content:'允许一端进行插入和删除，另一端只允许删除',label:'LPoint'})

match(p:Point{name:'双端队列'}),(p1:LPoint{name:'定义'})
where id(p)=86 and id(p1)=94
create (p)-[r:知识点与子知识点]->(p1)
match(p:Point{name:'双端队列'}),(p2:LPoint{name:'输出受限的双端队列'})
where id(p)=86 and id(p2)=95
create (p)-[r:知识点与子知识点]->(p2)
match(p:Point{name:'双端队列'}),(p3:LPoint{name:'输入受限的双端队列'}) 
where id(p)=86 and id(p3)=96
create (p)-[r:知识点与子知识点]->(p3)

create(p1:sigPoint{name:'输入、输出序列问题',no:'1',label:'sigPoint'})
create(p2:Point{name:'括号匹配问题',no:'2',label:'Point'})
create(p3:sigPoint{name:'表达式求值问题',no:'3',label:'sigPoint'})
create(p4:Point{name:'递归中的应用',no:'4',content='（1）函数调用的特点：最后调用的函数最先执行结束(LIFO)；
（2）函数调用时，需要一个“函数调用栈”存储：①调用返回地址；②实参；③局部变量
（3）递归的精髓在于能否将原始问题转换为属性相同但规模较小的问题；
（4）递归产生的问题：
    ①在递归调用过程中，系统为每一层的返回点、局部变量、传入实参等开辟了递归工作栈来进行数据存储，递归次数过多容易造成栈溢出等；
    ②通常情况下，其效率不高。
（5）递归算符转换为非递归算法，通常需要借助栈来实现这种转换。',label:'Point'})

match(p:Part{name:'栈的应用'}),(p1:sigPoint{name:'输入、输出序列问题'}) merge (p)-[r:部分与知识点]->(p1)
match(p:Part{name:'栈的应用'}),(p2:Point{name:'括号匹配问题'}) create (p)-[r:部分与知识点]->(p2)
match(p:Part{name:'栈的应用'}),(p3:Point{name:'表达式求值问题'}) create (p)-[r:部分与知识点]->(p3)
match(p:Part{name:'栈的应用'}),(p4:Point{name:'递归中的应用'}) create (p)-[r:部分与知识点]->(p4)
match(p:Point{name:'栈的操作特性'}),(p1:sigPoint{name:'输入、输出序列问题'}) merge (p)-[r:应用]->(p1)
match(p:Point{name:'队列的操作特性'}),(p1:sigPoint{name:'输入、输出序列问题'}) merge (p)-[r:应用]->(p1)

create(p1:LPoint{name:'连续输入和输出的情况',no:'(1)',content:'
eg:输入序列为1,2,3,……,n;
①栈的输出序列：n,n-1,……,2,1（倒序）;②队列的输出序列：1,2,……,n（正序）',label:'LPoint'})
create(p2:LPoint{name:'非连续输入和输出的情况',no:'(2)',content:'队列不论是在连续还是非连续的情况，输出序列的次序与输入序列一致。故以下主要讨论栈的情况。',label:'LPoint'})
create(a1:atom{name:'合法序列的规律',no:'①',content:'出栈序列中每一个元素后面所有比他小的元素组成一个递减序列',label:'atom'})
create(a2:atom{name:'求合法出栈序列的个数',no:'②',content:'
合法出栈序列个数：f(k-1)*f(n-k);
合法出栈的公式：f(n)=f(0)*f(n-1)+f(1)*(n-2)+……+f(n-2)*f(1)+f(n-1)*f(0)（且f(0)=f(1)=1）→f(n)=1/(n+1)*((2n)!/(n!*(2n-n)!)（卡特兰数）',label:'atom'})

match(p:sigPoint{name:'输入、输出序列问题'}),(p1:LPoint{name:'连续输入和输出的情况'}) merge (p)-[r:知识点与子知识点]->(p1)
match(p:sigPoint{name:'输入、输出序列问题'}),(p2:LPoint{name:'非连续输入和输出的情况'}) merge (p)-[r:知识点与子知识点]->(p2)
match(p:LPoint{name:'非连续输入和输出的情况'}),(a1:atom{name:'合法序列的规律'}) merge (p)-[r:子知识点与知识原子]->(a1)
match(p:LPoint{name:'非连续输入和输出的情况'}),(a2:atom{name:'求合法出栈序列的个数'}) merge (p)-[r:子知识点与知识原子]->(a2)
match(p:sigPoint{name:'栈的数学性质'}),(a2:atom{name:'求合法出栈序列的个数'}) merge (p)-[r:应用]->(a2)

create(p1:LPoint{name:'算法思想',no:'(1)',content:'
(Ⅰ)初始一个空栈，顺序读入括号;
(Ⅱ)若是右括号\')\',则与栈顶元素进行匹配，
    ①若匹配，则弹出栈顶元素并进行下一个元素；
    ②若不匹配，则该序列不合法；
(Ⅲ)若是左括号\'(\'，则压入栈中；
(Ⅳ)若全部元素遍历完毕，栈中非空则序列不合法。',label:'LPoint'})
create(p2:LPoint{name:'算法',no:'(2)',content:'
bool bracketCheck(char str[],int length){
    SqStack S;
    InitStack(S);
    for(int i=0;i<length;i++){
        if(str[i]==\'(\'||str[i]==\'[\'||str[i]==\'{\')
            Push(S,str[i]);
        else{
            if(StackEmpty(S))
                return false;
            char topElem;
            Pop(S,topElem);
            if(str[i]==\')\'&&topElem!=\'(\')
                return false;
            if(str[i]==\']\'&&topElem!=\'[\')
                return false;
            if(str[i]==\'}\'&&topElem==\'{\')
                return false;
        }
    }
    return StackEmpty(S);
}
#define MaxSize 10
typedef struct{
    char data[MaxSize];
    int top;
}SqStack;
void InitStack(SqStack &S);
void StackEmpty(SqStack S);
bool Push(SqStack &S,char x);
bool Pop(SqStack &S,char &x);',label:'LPoint'})

match(p:Point{name:'括号匹配问题'}),(p1:LPoint{name:'算法思想'}) merge (p)-[r:知识点与子知识点]->(p1)
match(p:Point{name:'括号匹配问题'}),(p2:LPoint{name:'算法'}) merge (p)-[r:知识点与子知识点]->(p2)

create(p1:LPoint{name:'求值表达式的三种形式(eg:A+B)',no:'(1)',content:'(1)前缀表达式（波兰表达式）:+AB,即将运算符放在数据前面；
(2)中缀表达式:A+B,即一般的数学式子；
(3)后缀表达式（逆波兰表达式）:AB+,即将运算符放在数据后面；',label:'LPoint'})
create(p2:LPoint{name:'前缀表达式的计算',no:'(2)',label:'LPoint'})
create(p3:LPoint{name:'中缀表达式的计算',no:'(3)',label:'LPoint'})
create(p4:LPoint{name:'后缀表达式的计算',no:'(4)',label:'LPoint'})

match(p:sigPoint{name:'表达式求值问题'}),(p1:LPoint{name:'求值表达式的三种形式(eg:A+B)'}) merge (p)-[r:知识点与子知识点]->(p1)
match(p:sigPoint{name:'表达式求值问题'}),(p2:LPoint{name:'前缀表达式的计算'}) merge (p)-[r:知识点与子知识点]->(p2)
match(p:sigPoint{name:'表达式求值问题'}),(p3:LPoint{name:'中缀表达式的计算'}) merge (p)-[r:知识点与子知识点]->(p3)
match(p:sigPoint{name:'表达式求值问题'}),(p4:LPoint{name:'后缀表达式的计算'}) merge (p)-[r:知识点与子知识点]->(p4)

create(a1:atom{name:'前缀表达式的手算方法',no:'①',content:'从右往左扫描，每遇到一个运算符，就让运算符后面最近的两个操作数执行对应运算，合体为一个操作数',label:'atom'})
create(a2:atom{name:'用栈实现前缀表达式的机算',no:'②',content:'算法思想：①从右往左扫描下一个元素，直到处理完所有元素；②若扫描到操作数，则压入栈中，并回到①；否则执行③；③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运行结果压回栈顶。（注意：先出栈的是左操作数）',label:'atom'})

match(p:LPoint{name:'前缀表达式的计算'}),(a1:atom{name:'前缀表达式的手算方法'}) merge (p)-[r:子知识点与知识原子]->(a1)
match(p:LPoint{name:'前缀表达式的计算'}),(a2:atom{name:'用栈实现前缀表达式的机算'}) merge (p)-[r:子知识点与知识原子]->(a2)

create(a1:atom{name:'后缀表达式的手算方法',no:'①',content:'从左往右扫描，每遇到一个运算符，就让运算符后面最近的两个操作数执行对应运算，合体为一个操作数',label:'atom'})
create(a2:atom{name:'用栈实现后缀表达式的机算',no:'②',content:'算法思想：①从左往右扫描下一个元素，直到处理完所有元素；②若扫描到操作数，则压入栈中，并回到①；否则执行③；③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运行结果压回栈顶。（注意：先出栈的是右操作数）',label:'atom'})

match(p:LPoint{name:'后缀表达式的计算'}),(a1:atom{name:'后缀表达式的手算方法'}) merge (p)-[r:子知识点与知识原子]->(a1)
match(p:LPoint{name:'后缀表达式的计算'}),(a2:atom{name:'用栈实现后缀表达式的机算'}) merge (p)-[r:子知识点与知识原子]->(a2)

create(a1:atom{name:'用栈实现中缀表达式的机算',no:'①',content:'算法思想：①初始化两个栈，操作数栈和运算符栈；②若扫描到操作数，则压入操作数栈中；③若扫描到运算符或界定符，则按照“中缀转后缀”相同的逻辑压入运算符栈(期间也会弹出运算符，每当弹出一个运算符时，就需要再弹出两个操作数栈的栈顶元素并执行相应运算，运算结果再压回操作数栈)（操作数栈是用来记录“后缀表达式求值”的结果；运算符栈是用来记录“中缀转后缀”的过程）',label:'atom'})
create(a2:sigatom{name:'中缀表达式转后缀表达式',no:'②',content:'(a)中缀转后缀的手算方法：①确定中缀表达式中各运算符的运算顺序（运算顺序不唯一，因此对应的后缀表达式也不唯一，推荐“左优先”原则：只要左边的运算符能先计算，就优先算左边的）；②选择下一个运算符，按照[左操作数 右操作数 运算符]的方式组成一个新的操作数；③如果还有运算符没有被处理，就继续②
(b)中缀转后缀的机算（算法思想）：
    (1)初始化一个栈，用于保存暂时不能确定运算顺序的运算符；
    (2)从左往右处理各个元素，直到末尾。可能遇到四种情况：
        ①若为操作数，直接加入后缀表达式；
        ②若为界限符时：
            a)若为‘(’，直接入栈；
            b)若为‘)’,则依次弹出栈内运算符并加入后缀表达式，直到弹出‘(’为止，‘(’,‘)’均不加入后缀表达式。
        ③若为运算符：‘+’，‘-’，‘*’，‘/’时：
            a)若栈空，入栈；
            b)若栈顶元素为‘(’,入栈；
            c)若当前元素的优先级高于栈顶元素，入栈；
            d)否则，依次弹出栈顶元素符，直到一个优先级比当前元素低的运算符或‘(’为止，再入栈。
        ④遍历完所有中缀表达式元素，若栈非空，依次弹出栈内所有元素。',label:'atom'})
create(a3:atom{name:'中缀表达式转前缀表达式',no:'③',content:'中缀转前缀的手算方法:①确定中缀表达式中各个运算符的运算顺序（运算顺序不唯一，因此对应的后缀表达式也不唯一，推荐“右优先”原则：只要右边的运算符能先计算，就优先算右边的）；②选择下一个运算符，按照[运算符 左操作数 右操作数]的方式组成一个新的操作数；③如果还有运算符没有处理，就继续②。',label:'atom'})

match(p:LPoint{name:'中缀表达式的计算'}),(a1:atom{name:'用栈实现中缀表达式的机算'}) merge (p)-[r:子知识点与知识原子]->(a1)
match(p:LPoint{name:'中缀表达式的计算'}),(a2:sigatom{name:'中缀表达式转后缀表达式'}) merge (p)-[r:子知识点与知识原子]->(a2)
match(p:LPoint{name:'中缀表达式的计算'}),(a3:atom{name:'中缀表达式转前缀表达式'}) merge (p)-[r:子知识点与知识原子]->(a3)

create(p1:Point{name:'树的层次遍历',no:'2',label:'Point'})
create(p2:Point{name:'图的广度优先遍历',no:'3',label:'Point'})
create(p3:Point{name:'操作系统中的应用',no:'4',content:'（1）解决主机与外部设备之间速度不匹配的问题——打印数据缓冲区；（2）解决由多用户引起的资源竞争问题——CPU资源的分配（FCFS）',label:'Point'})

match(p:Part{name:'队列的应用'}),(p1:Point{name:'树的层次遍历'}) merge (p)-[r:部分与知识点]->(p1)
match(p:Part{name:'队列的应用'}),(p2:Point{name:'图的广度优先遍历'}) merge (p)-[r:部分与知识点]->(p2)
match(p:Part{name:'队列的应用'}),(p3:Point{name:'操作系统中的应用'}) merge (p)-[r:部分与知识点]->(p3)
match(p:Part{name:'队列的应用'}),(p4:sigPoint{name:'输入、输出序列问题'}) merge (p)-[r:部分与知识点]->(p4)


match(n{name:'队列的链式存储'}) set n.source='https://www.icourse163.org/learn/ZJU-93001?tid=1462787444#/learn/content?type=detail&id=1239897401&cid=1261105632'
match(n{name:'队列的顺序存储'}) set n.source='https://www.icourse163.org/learn/ZJU-93001?tid=1462787444#/learn/content?type=detail&id=1239897401&cid=1261105631'
match(n{name:'队列'}) set n.source='https://www.icourse163.org/learn/ZJU-93001?tid=1462787444#/learn/content?type=detail&id=1239897401&cid=1261105635'
match(n{name:'表达式求值问题'}) set n.source='https://www.icourse163.org/learn/ZJU-93001?tid=1462787444#/learn/content?type=detail&id=1239897400&cid=1261105626'
match(n{name:'栈的链式存储'}) set n.source='https://www.icourse163.org/learn/ZJU-93001?tid=1462787444#/learn/content?type=detail&id=1239897400&cid=1261105625'
match(n{name:'栈的顺序存储'}) set n.source='https://www.icourse163.org/learn/ZJU-93001?tid=1462787444#/learn/content?type=detail&id=1239897400&cid=1261105623'
match(n{name:'栈'}) set n.source='https://www.icourse163.org/learn/ZJU-93001?tid=1462787444#/learn/content?type=detail&id=1239897400&cid=1261105622'

